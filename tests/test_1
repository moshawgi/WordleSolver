import unittest

import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.join(current_dir, '..')
sys.path.append(parent_dir)
grandparent_dir = os.path.join(parent_dir, '..')
sys.path.append(grandparent_dir)

try:
    from WordleAI import WordleAI as WordleAI
except ModuleNotFoundError:
    print("WordleAI.py is not found.")
    
from wordle_secret_words import get_secret_words
from valid_wordle_guesses import get_valid_wordle_guesses

class Test_Wordle_get_feedback(unittest.TestCase):
  def setUp(self):
       self.AI = WordleAI(get_valid_wordle_guesses(),  get_secret_words())

  def test_1(self):
      """get_feedback - AMBER presentation example"""
      secret_word = "AMBER"
      guess = "BRAKE"
      expected = "bra-e"

      actual = self.AI.get_feedback(guess, secret_word)
      self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_2(self):
      """get_feedback - MOTTO presentation example"""
      secret_word = "MOTTO"
      guess = "TOOTH"
      expected = "tOoT-"

      actual = self.AI.get_feedback(guess, secret_word)
      self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_3(self):
      """get_feedback - Documentation example #1"""
      secret_word = "EATEN"
      guess = "LEVER"
      expected = "-e-E-"  

      actual = self.AI.get_feedback(guess, secret_word)
      self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_4(self):
       """get_feedback - Documentation example #2"""
       secret_word = "LOWER"
       guess = "LEVER"
       expected = "L--ER"  

       actual = self.AI.get_feedback(guess, secret_word)
       self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_5(self):
      """get_feedback - Documentation example #3"""
      secret_word = "MADAM"
      guess = "MOMMY"
      expected = "M-m--" 

      actual = self.AI.get_feedback(guess, secret_word)
      self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_6(self):
      """get_feedback - Documentation example #4"""
      secret_word = "ARGUE"
      guess = "MOTTO"
      expected = "-----"  

      actual = self.AI.get_feedback(guess, secret_word)
      self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_7(self):
        """get_feedback - Guess is secret word"""
        secret_word = "MOTTO"
        guess = "MOTTO"
        expected = "MOTTO" 

        actual = self.AI.get_feedback(guess, secret_word)
        self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_8(self):
        """get_feedback - Guess is lowercase"""
        secret_word = "MADAM"
        guess = "mommy"
        expected = "M-m--" 

        actual = self.AI.get_feedback(guess, secret_word)
        self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_9(self):
        """get_feedback - Guess and secret word are anagrams with shared letter positions"""
        secret_word = "CRATE"
        guess = "TRACE"
        expected = "tRAcE"

        actual = self.AI.get_feedback(guess, secret_word)
        self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_10(self):
        """get_feedback - Guess and secret word are anagrams with no shared letter positions"""
        secret_word = "ANGLE"
        guess = "GLEAN"
        expected = "glean"

        actual = self.AI.get_feedback(guess, secret_word)
        self.assertEqual(actual, expected, f"Secret Word: {secret_word} Guess: {guess} You returned {actual}, but you should have returned {expected}")

  def test_11(self):
        """get_feedback - 3Blue1Brown Mistake Examples"""
        secret_words = ["ABIDE", "ERASE", "STEAL", "CREPE"]
        guess = "SPEED"
        expected = ["--e-d", "s-ee-", "S-E--", "-pEe-"]

        for i in range(len(secret_words)):
            actual = self.AI.get_feedback(guess, secret_words[i])
            self.assertEqual(actual, expected[i], f"Secret Word: {secret_words[i]} Guess: {guess} You returned {actual}, but you should have returned {expected[i]}")

if __name__ == '__main__':
   	unittest.main()
